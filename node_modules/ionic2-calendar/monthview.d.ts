import { OnInit, OnChanges, EventEmitter, SimpleChanges, TemplateRef, OnDestroy, AfterViewInit } from '@angular/core';
import { IonSlides } from '@ionic/angular';
import { ICalendarComponent, IEvent, IMonthView, IMonthViewRow, ITimeSelected, IRange, CalendarMode, IDateFormatter } from './calendar';
import { CalendarService } from './calendar.service';
import { IMonthViewDisplayEventTemplateContext } from './calendar';
import * as ɵngcc0 from '@angular/core';
export declare class MonthViewComponent implements ICalendarComponent, OnInit, OnDestroy, OnChanges, AfterViewInit {
    private calendarService;
    constructor(calendarService: CalendarService);
    slider: IonSlides;
    monthviewDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewInactiveDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewEventDetailTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    formatDay: string;
    formatDayHeader: string;
    formatMonthTitle: string;
    eventSource: IEvent[];
    startingDayMonth: number;
    showEventDetail: boolean;
    noEventsLabel: string;
    autoSelect: boolean;
    markDisabled: (date: Date) => boolean;
    locale: string;
    dateFormatter: IDateFormatter;
    dir: string;
    lockSwipeToPrev: boolean;
    lockSwipes: boolean;
    sliderOptions: any;
    onRangeChanged: EventEmitter<IRange>;
    onEventSelected: EventEmitter<IEvent>;
    onTimeSelected: EventEmitter<ITimeSelected>;
    onTitleChanged: EventEmitter<string>;
    views: IMonthView[];
    currentViewIndex: number;
    selectedDate: IMonthViewRow;
    range: IRange;
    mode: CalendarMode;
    direction: number;
    private moveOnSelected;
    private inited;
    private callbackOnInit;
    private currentDateChangedFromParentSubscription;
    private eventSourceChangedSubscription;
    private slideChangedSubscription;
    private slideUpdatedSubscription;
    private formatDayLabel;
    private formatDayHeaderLabel;
    private formatTitle;
    static getDates(startDate: Date, n: number): Date[];
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    onSlideChanged(): void;
    move(direction: number): void;
    createDateObject(date: Date): IMonthViewRow;
    getViewData(startTime: Date): IMonthView;
    getHighlightClass(date: IMonthViewRow): string;
    getRange(currentDate: Date): IRange;
    onDataLoaded(): void;
    refreshView(): void;
    getTitle(): string;
    private compareEvent;
    select(viewDate: IMonthViewRow): void;
    slideView(direction: number): void;
    updateCurrentView(currentViewStartDate: Date, view: IMonthView): void;
    eventSelected(event: IEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MonthViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<MonthViewComponent, "monthview", never, { "autoSelect": "autoSelect"; "dir": "dir"; "sliderOptions": "sliderOptions"; "monthviewDisplayEventTemplate": "monthviewDisplayEventTemplate"; "monthviewInactiveDisplayEventTemplate": "monthviewInactiveDisplayEventTemplate"; "monthviewEventDetailTemplate": "monthviewEventDetailTemplate"; "formatDay": "formatDay"; "formatDayHeader": "formatDayHeader"; "formatMonthTitle": "formatMonthTitle"; "eventSource": "eventSource"; "startingDayMonth": "startingDayMonth"; "showEventDetail": "showEventDetail"; "noEventsLabel": "noEventsLabel"; "markDisabled": "markDisabled"; "locale": "locale"; "dateFormatter": "dateFormatter"; "lockSwipeToPrev": "lockSwipeToPrev"; "lockSwipes": "lockSwipes"; }, { "onRangeChanged": "onRangeChanged"; "onEventSelected": "onEventSelected"; "onTimeSelected": "onTimeSelected"; "onTitleChanged": "onTitleChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9udGh2aWV3LmQudHMiLCJzb3VyY2VzIjpbIm1vbnRodmlldy5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT25Jbml0LCBPbkNoYW5nZXMsIEV2ZW50RW1pdHRlciwgU2ltcGxlQ2hhbmdlcywgVGVtcGxhdGVSZWYsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSW9uU2xpZGVzIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xuaW1wb3J0IHsgSUNhbGVuZGFyQ29tcG9uZW50LCBJRXZlbnQsIElNb250aFZpZXcsIElNb250aFZpZXdSb3csIElUaW1lU2VsZWN0ZWQsIElSYW5nZSwgQ2FsZW5kYXJNb2RlLCBJRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vY2FsZW5kYXInO1xuaW1wb3J0IHsgQ2FsZW5kYXJTZXJ2aWNlIH0gZnJvbSAnLi9jYWxlbmRhci5zZXJ2aWNlJztcbmltcG9ydCB7IElNb250aFZpZXdEaXNwbGF5RXZlbnRUZW1wbGF0ZUNvbnRleHQgfSBmcm9tICcuL2NhbGVuZGFyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1vbnRoVmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIElDYWxlbmRhckNvbXBvbmVudCwgT25Jbml0LCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBjYWxlbmRhclNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoY2FsZW5kYXJTZXJ2aWNlOiBDYWxlbmRhclNlcnZpY2UpO1xuICAgIHNsaWRlcjogSW9uU2xpZGVzO1xuICAgIG1vbnRodmlld0Rpc3BsYXlFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RGlzcGxheUV2ZW50VGVtcGxhdGVDb250ZXh0PjtcbiAgICBtb250aHZpZXdJbmFjdGl2ZURpc3BsYXlFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RGlzcGxheUV2ZW50VGVtcGxhdGVDb250ZXh0PjtcbiAgICBtb250aHZpZXdFdmVudERldGFpbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RGlzcGxheUV2ZW50VGVtcGxhdGVDb250ZXh0PjtcbiAgICBmb3JtYXREYXk6IHN0cmluZztcbiAgICBmb3JtYXREYXlIZWFkZXI6IHN0cmluZztcbiAgICBmb3JtYXRNb250aFRpdGxlOiBzdHJpbmc7XG4gICAgZXZlbnRTb3VyY2U6IElFdmVudFtdO1xuICAgIHN0YXJ0aW5nRGF5TW9udGg6IG51bWJlcjtcbiAgICBzaG93RXZlbnREZXRhaWw6IGJvb2xlYW47XG4gICAgbm9FdmVudHNMYWJlbDogc3RyaW5nO1xuICAgIGF1dG9TZWxlY3Q6IGJvb2xlYW47XG4gICAgbWFya0Rpc2FibGVkOiAoZGF0ZTogRGF0ZSkgPT4gYm9vbGVhbjtcbiAgICBsb2NhbGU6IHN0cmluZztcbiAgICBkYXRlRm9ybWF0dGVyOiBJRGF0ZUZvcm1hdHRlcjtcbiAgICBkaXI6IHN0cmluZztcbiAgICBsb2NrU3dpcGVUb1ByZXY6IGJvb2xlYW47XG4gICAgbG9ja1N3aXBlczogYm9vbGVhbjtcbiAgICBzbGlkZXJPcHRpb25zOiBhbnk7XG4gICAgb25SYW5nZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxJUmFuZ2U+O1xuICAgIG9uRXZlbnRTZWxlY3RlZDogRXZlbnRFbWl0dGVyPElFdmVudD47XG4gICAgb25UaW1lU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxJVGltZVNlbGVjdGVkPjtcbiAgICBvblRpdGxlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgdmlld3M6IElNb250aFZpZXdbXTtcbiAgICBjdXJyZW50Vmlld0luZGV4OiBudW1iZXI7XG4gICAgc2VsZWN0ZWREYXRlOiBJTW9udGhWaWV3Um93O1xuICAgIHJhbmdlOiBJUmFuZ2U7XG4gICAgbW9kZTogQ2FsZW5kYXJNb2RlO1xuICAgIGRpcmVjdGlvbjogbnVtYmVyO1xuICAgIHByaXZhdGUgbW92ZU9uU2VsZWN0ZWQ7XG4gICAgcHJpdmF0ZSBpbml0ZWQ7XG4gICAgcHJpdmF0ZSBjYWxsYmFja09uSW5pdDtcbiAgICBwcml2YXRlIGN1cnJlbnREYXRlQ2hhbmdlZEZyb21QYXJlbnRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBldmVudFNvdXJjZUNoYW5nZWRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBzbGlkZUNoYW5nZWRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBzbGlkZVVwZGF0ZWRTdWJzY3JpcHRpb247XG4gICAgcHJpdmF0ZSBmb3JtYXREYXlMYWJlbDtcbiAgICBwcml2YXRlIGZvcm1hdERheUhlYWRlckxhYmVsO1xuICAgIHByaXZhdGUgZm9ybWF0VGl0bGU7XG4gICAgc3RhdGljIGdldERhdGVzKHN0YXJ0RGF0ZTogRGF0ZSwgbjogbnVtYmVyKTogRGF0ZVtdO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBvblNsaWRlQ2hhbmdlZCgpOiB2b2lkO1xuICAgIG1vdmUoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIGNyZWF0ZURhdGVPYmplY3QoZGF0ZTogRGF0ZSk6IElNb250aFZpZXdSb3c7XG4gICAgZ2V0Vmlld0RhdGEoc3RhcnRUaW1lOiBEYXRlKTogSU1vbnRoVmlldztcbiAgICBnZXRIaWdobGlnaHRDbGFzcyhkYXRlOiBJTW9udGhWaWV3Um93KTogc3RyaW5nO1xuICAgIGdldFJhbmdlKGN1cnJlbnREYXRlOiBEYXRlKTogSVJhbmdlO1xuICAgIG9uRGF0YUxvYWRlZCgpOiB2b2lkO1xuICAgIHJlZnJlc2hWaWV3KCk6IHZvaWQ7XG4gICAgZ2V0VGl0bGUoKTogc3RyaW5nO1xuICAgIHByaXZhdGUgY29tcGFyZUV2ZW50O1xuICAgIHNlbGVjdCh2aWV3RGF0ZTogSU1vbnRoVmlld1Jvdyk6IHZvaWQ7XG4gICAgc2xpZGVWaWV3KGRpcmVjdGlvbjogbnVtYmVyKTogdm9pZDtcbiAgICB1cGRhdGVDdXJyZW50VmlldyhjdXJyZW50Vmlld1N0YXJ0RGF0ZTogRGF0ZSwgdmlldzogSU1vbnRoVmlldyk6IHZvaWQ7XG4gICAgZXZlbnRTZWxlY3RlZChldmVudDogSUV2ZW50KTogdm9pZDtcbn1cbiJdfQ==