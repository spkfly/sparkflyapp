import { EventEmitter, OnInit, TemplateRef } from '@angular/core';
import { CalendarService } from './calendar.service';
import * as ɵngcc0 from '@angular/core';
export interface IEvent {
    allDay: boolean;
    endTime: Date;
    startTime: Date;
    title: string;
}
export interface IRange {
    startTime: Date;
    endTime: Date;
}
export interface IView {
}
export interface IDayView extends IView {
    allDayEvents: IDisplayAllDayEvent[];
    rows: IDayViewRow[];
}
export interface IDayViewRow {
    events: IDisplayEvent[];
    time: Date;
}
export interface IMonthView extends IView {
    dates: IMonthViewRow[];
    dayHeaders: string[];
}
export interface IMonthViewRow {
    current?: boolean;
    date: Date;
    events: IEvent[];
    hasEvent?: boolean;
    label: string;
    secondary: boolean;
    selected?: boolean;
    disabled: boolean;
}
export interface IWeekView extends IView {
    dates: IWeekViewDateRow[];
    rows: IWeekViewRow[][];
}
export interface IWeekViewDateRow {
    current?: boolean;
    date: Date;
    events: IDisplayEvent[];
    hasEvent?: boolean;
    selected?: boolean;
    dayHeader: string;
}
export interface IWeekViewRow {
    events: IDisplayEvent[];
    time: Date;
}
export interface IDisplayEvent {
    endIndex: number;
    endOffset?: number;
    event: IEvent;
    startIndex: number;
    startOffset?: number;
    overlapNumber?: number;
    position?: number;
}
export interface IDisplayWeekViewHeader {
    viewDate: IWeekViewDateRow;
}
export interface IDisplayAllDayEvent {
    event: IEvent;
}
export interface ICalendarComponent {
    currentViewIndex: number;
    direction: number;
    eventSource: IEvent[];
    getRange: {
        (date: Date): IRange;
    };
    getViewData: {
        (date: Date): IView;
    };
    mode: CalendarMode;
    range: IRange;
    views: IView[];
    onDataLoaded: {
        (): void;
    };
    onRangeChanged: EventEmitter<IRange>;
}
export interface ITimeSelected {
    events: IEvent[];
    selectedTime: Date;
    disabled: boolean;
}
export interface IMonthViewDisplayEventTemplateContext {
    view: IView;
    row: number;
    col: number;
}
export interface IMonthViewEventDetailTemplateContext {
    selectedDate: ITimeSelected;
    noEventsLabel: string;
}
export interface IWeekViewAllDayEventSectionTemplateContext {
    day: IWeekViewDateRow;
    eventTemplate: TemplateRef<IDisplayAllDayEvent>;
}
export interface IWeekViewNormalEventSectionTemplateContext {
    tm: IWeekViewRow;
    eventTemplate: TemplateRef<IDisplayEvent>;
}
export interface IDayViewAllDayEventSectionTemplateContext {
    alldayEvents: IDisplayAllDayEvent[];
    eventTemplate: TemplateRef<IDisplayAllDayEvent>;
}
export interface IDayViewNormalEventSectionTemplateContext {
    tm: IDayViewRow;
    eventTemplate: TemplateRef<IDisplayEvent>;
}
export interface IDateFormatter {
    formatMonthViewDay?: {
        (date: Date): string;
    };
    formatMonthViewDayHeader?: {
        (date: Date): string;
    };
    formatMonthViewTitle?: {
        (date: Date): string;
    };
    formatWeekViewDayHeader?: {
        (date: Date): string;
    };
    formatWeekViewTitle?: {
        (date: Date): string;
    };
    formatWeekViewHourColumn?: {
        (date: Date): string;
    };
    formatDayViewTitle?: {
        (date: Date): string;
    };
    formatDayViewHourColumn?: {
        (date: Date): string;
    };
}
export declare type CalendarMode = 'day' | 'month' | 'week';
export declare type QueryMode = 'local' | 'remote';
export declare enum Step {
    QuarterHour = 15,
    HalfHour = 30,
    Hour = 60
}
export declare class CalendarComponent implements OnInit {
    private calendarService;
    private appLocale;
    get currentDate(): Date;
    set currentDate(val: Date);
    eventSource: IEvent[];
    calendarMode: CalendarMode;
    formatDay: string;
    formatDayHeader: string;
    formatDayTitle: string;
    formatWeekTitle: string;
    formatMonthTitle: string;
    formatWeekViewDayHeader: string;
    formatHourColumn: string;
    showEventDetail: boolean;
    startingDayMonth: number;
    startingDayWeek: number;
    allDayLabel: string;
    noEventsLabel: string;
    queryMode: QueryMode;
    step: Step;
    timeInterval: number;
    autoSelect: boolean;
    markDisabled: (date: Date) => boolean;
    monthviewDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewInactiveDisplayEventTemplate: TemplateRef<IMonthViewDisplayEventTemplateContext>;
    monthviewEventDetailTemplate: TemplateRef<IMonthViewEventDetailTemplateContext>;
    weekviewHeaderTemplate: TemplateRef<IDisplayWeekViewHeader>;
    weekviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;
    weekviewNormalEventTemplate: TemplateRef<IDisplayEvent>;
    dayviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;
    dayviewNormalEventTemplate: TemplateRef<IDisplayEvent>;
    weekviewAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;
    weekviewNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;
    dayviewAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;
    dayviewNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;
    weekviewInactiveAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;
    weekviewInactiveNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;
    dayviewInactiveAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;
    dayviewInactiveNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;
    dateFormatter: IDateFormatter;
    dir: string;
    scrollToHour: number;
    preserveScrollPosition: boolean;
    lockSwipeToPrev: boolean;
    lockSwipes: boolean;
    locale: string;
    startHour: number;
    endHour: number;
    sliderOptions: any;
    onCurrentDateChanged: EventEmitter<Date>;
    onRangeChanged: EventEmitter<IRange>;
    onEventSelected: EventEmitter<IEvent>;
    onTimeSelected: EventEmitter<ITimeSelected>;
    onTitleChanged: EventEmitter<string>;
    private _currentDate;
    hourParts: number;
    hourSegments: number;
    private currentDateChangedFromChildrenSubscription;
    constructor(calendarService: CalendarService, appLocale: string);
    ngOnInit(): void;
    ngOnDestroy(): void;
    rangeChanged(range: IRange): void;
    eventSelected(event: IEvent): void;
    timeSelected(timeSelected: ITimeSelected): void;
    titleChanged(title: string): void;
    loadEvents(): void;
    slideNext(): void;
    slidePrev(): void;
    update(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CalendarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CalendarComponent, "calendar", never, { "eventSource": "eventSource"; "calendarMode": "calendarMode"; "formatDay": "formatDay"; "formatDayHeader": "formatDayHeader"; "formatDayTitle": "formatDayTitle"; "formatWeekTitle": "formatWeekTitle"; "formatMonthTitle": "formatMonthTitle"; "formatWeekViewDayHeader": "formatWeekViewDayHeader"; "formatHourColumn": "formatHourColumn"; "showEventDetail": "showEventDetail"; "startingDayMonth": "startingDayMonth"; "startingDayWeek": "startingDayWeek"; "allDayLabel": "allDayLabel"; "noEventsLabel": "noEventsLabel"; "queryMode": "queryMode"; "step": "step"; "timeInterval": "timeInterval"; "autoSelect": "autoSelect"; "dir": "dir"; "scrollToHour": "scrollToHour"; "preserveScrollPosition": "preserveScrollPosition"; "lockSwipeToPrev": "lockSwipeToPrev"; "lockSwipes": "lockSwipes"; "locale": "locale"; "startHour": "startHour"; "endHour": "endHour"; "currentDate": "currentDate"; "markDisabled": "markDisabled"; "monthviewDisplayEventTemplate": "monthviewDisplayEventTemplate"; "monthviewInactiveDisplayEventTemplate": "monthviewInactiveDisplayEventTemplate"; "monthviewEventDetailTemplate": "monthviewEventDetailTemplate"; "weekviewHeaderTemplate": "weekviewHeaderTemplate"; "weekviewAllDayEventTemplate": "weekviewAllDayEventTemplate"; "weekviewNormalEventTemplate": "weekviewNormalEventTemplate"; "dayviewAllDayEventTemplate": "dayviewAllDayEventTemplate"; "dayviewNormalEventTemplate": "dayviewNormalEventTemplate"; "weekviewAllDayEventSectionTemplate": "weekviewAllDayEventSectionTemplate"; "weekviewNormalEventSectionTemplate": "weekviewNormalEventSectionTemplate"; "dayviewAllDayEventSectionTemplate": "dayviewAllDayEventSectionTemplate"; "dayviewNormalEventSectionTemplate": "dayviewNormalEventSectionTemplate"; "weekviewInactiveAllDayEventSectionTemplate": "weekviewInactiveAllDayEventSectionTemplate"; "weekviewInactiveNormalEventSectionTemplate": "weekviewInactiveNormalEventSectionTemplate"; "dayviewInactiveAllDayEventSectionTemplate": "dayviewInactiveAllDayEventSectionTemplate"; "dayviewInactiveNormalEventSectionTemplate": "dayviewInactiveNormalEventSectionTemplate"; "dateFormatter": "dateFormatter"; "sliderOptions": "sliderOptions"; }, { "onCurrentDateChanged": "onCurrentDateChanged"; "onRangeChanged": "onRangeChanged"; "onEventSelected": "onEventSelected"; "onTimeSelected": "onTimeSelected"; "onTitleChanged": "onTitleChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIE9uSW5pdCwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENhbGVuZGFyU2VydmljZSB9IGZyb20gJy4vY2FsZW5kYXIuc2VydmljZSc7XG5leHBvcnQgaW50ZXJmYWNlIElFdmVudCB7XG4gICAgYWxsRGF5OiBib29sZWFuO1xuICAgIGVuZFRpbWU6IERhdGU7XG4gICAgc3RhcnRUaW1lOiBEYXRlO1xuICAgIHRpdGxlOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIElSYW5nZSB7XG4gICAgc3RhcnRUaW1lOiBEYXRlO1xuICAgIGVuZFRpbWU6IERhdGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIElWaWV3IHtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSURheVZpZXcgZXh0ZW5kcyBJVmlldyB7XG4gICAgYWxsRGF5RXZlbnRzOiBJRGlzcGxheUFsbERheUV2ZW50W107XG4gICAgcm93czogSURheVZpZXdSb3dbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSURheVZpZXdSb3cge1xuICAgIGV2ZW50czogSURpc3BsYXlFdmVudFtdO1xuICAgIHRpbWU6IERhdGU7XG59XG5leHBvcnQgaW50ZXJmYWNlIElNb250aFZpZXcgZXh0ZW5kcyBJVmlldyB7XG4gICAgZGF0ZXM6IElNb250aFZpZXdSb3dbXTtcbiAgICBkYXlIZWFkZXJzOiBzdHJpbmdbXTtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSU1vbnRoVmlld1JvdyB7XG4gICAgY3VycmVudD86IGJvb2xlYW47XG4gICAgZGF0ZTogRGF0ZTtcbiAgICBldmVudHM6IElFdmVudFtdO1xuICAgIGhhc0V2ZW50PzogYm9vbGVhbjtcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIHNlY29uZGFyeTogYm9vbGVhbjtcbiAgICBzZWxlY3RlZD86IGJvb2xlYW47XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG59XG5leHBvcnQgaW50ZXJmYWNlIElXZWVrVmlldyBleHRlbmRzIElWaWV3IHtcbiAgICBkYXRlczogSVdlZWtWaWV3RGF0ZVJvd1tdO1xuICAgIHJvd3M6IElXZWVrVmlld1Jvd1tdW107XG59XG5leHBvcnQgaW50ZXJmYWNlIElXZWVrVmlld0RhdGVSb3cge1xuICAgIGN1cnJlbnQ/OiBib29sZWFuO1xuICAgIGRhdGU6IERhdGU7XG4gICAgZXZlbnRzOiBJRGlzcGxheUV2ZW50W107XG4gICAgaGFzRXZlbnQ/OiBib29sZWFuO1xuICAgIHNlbGVjdGVkPzogYm9vbGVhbjtcbiAgICBkYXlIZWFkZXI6IHN0cmluZztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVdlZWtWaWV3Um93IHtcbiAgICBldmVudHM6IElEaXNwbGF5RXZlbnRbXTtcbiAgICB0aW1lOiBEYXRlO1xufVxuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheUV2ZW50IHtcbiAgICBlbmRJbmRleDogbnVtYmVyO1xuICAgIGVuZE9mZnNldD86IG51bWJlcjtcbiAgICBldmVudDogSUV2ZW50O1xuICAgIHN0YXJ0SW5kZXg6IG51bWJlcjtcbiAgICBzdGFydE9mZnNldD86IG51bWJlcjtcbiAgICBvdmVybGFwTnVtYmVyPzogbnVtYmVyO1xuICAgIHBvc2l0aW9uPzogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJRGlzcGxheVdlZWtWaWV3SGVhZGVyIHtcbiAgICB2aWV3RGF0ZTogSVdlZWtWaWV3RGF0ZVJvdztcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSURpc3BsYXlBbGxEYXlFdmVudCB7XG4gICAgZXZlbnQ6IElFdmVudDtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSUNhbGVuZGFyQ29tcG9uZW50IHtcbiAgICBjdXJyZW50Vmlld0luZGV4OiBudW1iZXI7XG4gICAgZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgZXZlbnRTb3VyY2U6IElFdmVudFtdO1xuICAgIGdldFJhbmdlOiB7XG4gICAgICAgIChkYXRlOiBEYXRlKTogSVJhbmdlO1xuICAgIH07XG4gICAgZ2V0Vmlld0RhdGE6IHtcbiAgICAgICAgKGRhdGU6IERhdGUpOiBJVmlldztcbiAgICB9O1xuICAgIG1vZGU6IENhbGVuZGFyTW9kZTtcbiAgICByYW5nZTogSVJhbmdlO1xuICAgIHZpZXdzOiBJVmlld1tdO1xuICAgIG9uRGF0YUxvYWRlZDoge1xuICAgICAgICAoKTogdm9pZDtcbiAgICB9O1xuICAgIG9uUmFuZ2VDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8SVJhbmdlPjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSVRpbWVTZWxlY3RlZCB7XG4gICAgZXZlbnRzOiBJRXZlbnRbXTtcbiAgICBzZWxlY3RlZFRpbWU6IERhdGU7XG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XG59XG5leHBvcnQgaW50ZXJmYWNlIElNb250aFZpZXdEaXNwbGF5RXZlbnRUZW1wbGF0ZUNvbnRleHQge1xuICAgIHZpZXc6IElWaWV3O1xuICAgIHJvdzogbnVtYmVyO1xuICAgIGNvbDogbnVtYmVyO1xufVxuZXhwb3J0IGludGVyZmFjZSBJTW9udGhWaWV3RXZlbnREZXRhaWxUZW1wbGF0ZUNvbnRleHQge1xuICAgIHNlbGVjdGVkRGF0ZTogSVRpbWVTZWxlY3RlZDtcbiAgICBub0V2ZW50c0xhYmVsOiBzdHJpbmc7XG59XG5leHBvcnQgaW50ZXJmYWNlIElXZWVrVmlld0FsbERheUV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dCB7XG4gICAgZGF5OiBJV2Vla1ZpZXdEYXRlUm93O1xuICAgIGV2ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEaXNwbGF5QWxsRGF5RXZlbnQ+O1xufVxuZXhwb3J0IGludGVyZmFjZSBJV2Vla1ZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQge1xuICAgIHRtOiBJV2Vla1ZpZXdSb3c7XG4gICAgZXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SURpc3BsYXlFdmVudD47XG59XG5leHBvcnQgaW50ZXJmYWNlIElEYXlWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0IHtcbiAgICBhbGxkYXlFdmVudHM6IElEaXNwbGF5QWxsRGF5RXZlbnRbXTtcbiAgICBldmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGlzcGxheUFsbERheUV2ZW50Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSURheVZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQge1xuICAgIHRtOiBJRGF5Vmlld1JvdztcbiAgICBldmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGlzcGxheUV2ZW50Pjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgSURhdGVGb3JtYXR0ZXIge1xuICAgIGZvcm1hdE1vbnRoVmlld0RheT86IHtcbiAgICAgICAgKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgfTtcbiAgICBmb3JtYXRNb250aFZpZXdEYXlIZWFkZXI/OiB7XG4gICAgICAgIChkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIH07XG4gICAgZm9ybWF0TW9udGhWaWV3VGl0bGU/OiB7XG4gICAgICAgIChkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIH07XG4gICAgZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXI/OiB7XG4gICAgICAgIChkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIH07XG4gICAgZm9ybWF0V2Vla1ZpZXdUaXRsZT86IHtcbiAgICAgICAgKGRhdGU6IERhdGUpOiBzdHJpbmc7XG4gICAgfTtcbiAgICBmb3JtYXRXZWVrVmlld0hvdXJDb2x1bW4/OiB7XG4gICAgICAgIChkYXRlOiBEYXRlKTogc3RyaW5nO1xuICAgIH07XG4gICAgZm9ybWF0RGF5Vmlld1RpdGxlPzoge1xuICAgICAgICAoZGF0ZTogRGF0ZSk6IHN0cmluZztcbiAgICB9O1xuICAgIGZvcm1hdERheVZpZXdIb3VyQ29sdW1uPzoge1xuICAgICAgICAoZGF0ZTogRGF0ZSk6IHN0cmluZztcbiAgICB9O1xufVxuZXhwb3J0IGRlY2xhcmUgdHlwZSBDYWxlbmRhck1vZGUgPSAnZGF5JyB8ICdtb250aCcgfCAnd2Vlayc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFF1ZXJ5TW9kZSA9ICdsb2NhbCcgfCAncmVtb3RlJztcbmV4cG9ydCBkZWNsYXJlIGVudW0gU3RlcCB7XG4gICAgUXVhcnRlckhvdXIgPSAxNSxcbiAgICBIYWxmSG91ciA9IDMwLFxuICAgIEhvdXIgPSA2MFxufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FsZW5kYXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIHByaXZhdGUgY2FsZW5kYXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgYXBwTG9jYWxlO1xuICAgIGdldCBjdXJyZW50RGF0ZSgpOiBEYXRlO1xuICAgIHNldCBjdXJyZW50RGF0ZSh2YWw6IERhdGUpO1xuICAgIGV2ZW50U291cmNlOiBJRXZlbnRbXTtcbiAgICBjYWxlbmRhck1vZGU6IENhbGVuZGFyTW9kZTtcbiAgICBmb3JtYXREYXk6IHN0cmluZztcbiAgICBmb3JtYXREYXlIZWFkZXI6IHN0cmluZztcbiAgICBmb3JtYXREYXlUaXRsZTogc3RyaW5nO1xuICAgIGZvcm1hdFdlZWtUaXRsZTogc3RyaW5nO1xuICAgIGZvcm1hdE1vbnRoVGl0bGU6IHN0cmluZztcbiAgICBmb3JtYXRXZWVrVmlld0RheUhlYWRlcjogc3RyaW5nO1xuICAgIGZvcm1hdEhvdXJDb2x1bW46IHN0cmluZztcbiAgICBzaG93RXZlbnREZXRhaWw6IGJvb2xlYW47XG4gICAgc3RhcnRpbmdEYXlNb250aDogbnVtYmVyO1xuICAgIHN0YXJ0aW5nRGF5V2VlazogbnVtYmVyO1xuICAgIGFsbERheUxhYmVsOiBzdHJpbmc7XG4gICAgbm9FdmVudHNMYWJlbDogc3RyaW5nO1xuICAgIHF1ZXJ5TW9kZTogUXVlcnlNb2RlO1xuICAgIHN0ZXA6IFN0ZXA7XG4gICAgdGltZUludGVydmFsOiBudW1iZXI7XG4gICAgYXV0b1NlbGVjdDogYm9vbGVhbjtcbiAgICBtYXJrRGlzYWJsZWQ6IChkYXRlOiBEYXRlKSA9PiBib29sZWFuO1xuICAgIG1vbnRodmlld0Rpc3BsYXlFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RGlzcGxheUV2ZW50VGVtcGxhdGVDb250ZXh0PjtcbiAgICBtb250aHZpZXdJbmFjdGl2ZURpc3BsYXlFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RGlzcGxheUV2ZW50VGVtcGxhdGVDb250ZXh0PjtcbiAgICBtb250aHZpZXdFdmVudERldGFpbFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJTW9udGhWaWV3RXZlbnREZXRhaWxUZW1wbGF0ZUNvbnRleHQ+O1xuICAgIHdlZWt2aWV3SGVhZGVyVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEaXNwbGF5V2Vla1ZpZXdIZWFkZXI+O1xuICAgIHdlZWt2aWV3QWxsRGF5RXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SURpc3BsYXlBbGxEYXlFdmVudD47XG4gICAgd2Vla3ZpZXdOb3JtYWxFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGlzcGxheUV2ZW50PjtcbiAgICBkYXl2aWV3QWxsRGF5RXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SURpc3BsYXlBbGxEYXlFdmVudD47XG4gICAgZGF5dmlld05vcm1hbEV2ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEaXNwbGF5RXZlbnQ+O1xuICAgIHdlZWt2aWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElXZWVrVmlld0FsbERheUV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dD47XG4gICAgd2Vla3ZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SVdlZWtWaWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICBkYXl2aWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEYXlWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICBkYXl2aWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEYXlWaWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICB3ZWVrdmlld0luYWN0aXZlQWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElXZWVrVmlld0FsbERheUV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dD47XG4gICAgd2Vla3ZpZXdJbmFjdGl2ZU5vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJV2Vla1ZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQ+O1xuICAgIGRheXZpZXdJbmFjdGl2ZUFsbERheUV2ZW50U2VjdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGF5Vmlld0FsbERheUV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dD47XG4gICAgZGF5dmlld0luYWN0aXZlTm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEYXlWaWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICBkYXRlRm9ybWF0dGVyOiBJRGF0ZUZvcm1hdHRlcjtcbiAgICBkaXI6IHN0cmluZztcbiAgICBzY3JvbGxUb0hvdXI6IG51bWJlcjtcbiAgICBwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uOiBib29sZWFuO1xuICAgIGxvY2tTd2lwZVRvUHJldjogYm9vbGVhbjtcbiAgICBsb2NrU3dpcGVzOiBib29sZWFuO1xuICAgIGxvY2FsZTogc3RyaW5nO1xuICAgIHN0YXJ0SG91cjogbnVtYmVyO1xuICAgIGVuZEhvdXI6IG51bWJlcjtcbiAgICBzbGlkZXJPcHRpb25zOiBhbnk7XG4gICAgb25DdXJyZW50RGF0ZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxEYXRlPjtcbiAgICBvblJhbmdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPElSYW5nZT47XG4gICAgb25FdmVudFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SUV2ZW50PjtcbiAgICBvblRpbWVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPElUaW1lU2VsZWN0ZWQ+O1xuICAgIG9uVGl0bGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICBwcml2YXRlIF9jdXJyZW50RGF0ZTtcbiAgICBob3VyUGFydHM6IG51bWJlcjtcbiAgICBob3VyU2VnbWVudHM6IG51bWJlcjtcbiAgICBwcml2YXRlIGN1cnJlbnREYXRlQ2hhbmdlZEZyb21DaGlsZHJlblN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihjYWxlbmRhclNlcnZpY2U6IENhbGVuZGFyU2VydmljZSwgYXBwTG9jYWxlOiBzdHJpbmcpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICByYW5nZUNoYW5nZWQocmFuZ2U6IElSYW5nZSk6IHZvaWQ7XG4gICAgZXZlbnRTZWxlY3RlZChldmVudDogSUV2ZW50KTogdm9pZDtcbiAgICB0aW1lU2VsZWN0ZWQodGltZVNlbGVjdGVkOiBJVGltZVNlbGVjdGVkKTogdm9pZDtcbiAgICB0aXRsZUNoYW5nZWQodGl0bGU6IHN0cmluZyk6IHZvaWQ7XG4gICAgbG9hZEV2ZW50cygpOiB2b2lkO1xuICAgIHNsaWRlTmV4dCgpOiB2b2lkO1xuICAgIHNsaWRlUHJldigpOiB2b2lkO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xufVxuIl19