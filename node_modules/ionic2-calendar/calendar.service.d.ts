import { Observable } from 'rxjs';
import { ICalendarComponent, CalendarMode, QueryMode } from './calendar';
import * as ɵngcc0 from '@angular/core';
export declare class CalendarService {
    queryMode: QueryMode;
    currentDateChangedFromParent$: Observable<Date>;
    currentDateChangedFromChildren$: Observable<Date>;
    eventSourceChanged$: Observable<void>;
    slideChanged$: Observable<number>;
    slideUpdated$: Observable<void>;
    private _currentDate;
    private currentDateChangedFromParent;
    private currentDateChangedFromChildren;
    private eventSourceChanged;
    private slideChanged;
    private slideUpdated;
    constructor();
    setCurrentDate(val: Date, fromParent?: boolean): void;
    get currentDate(): Date;
    rangeChanged(component: ICalendarComponent): void;
    private getStep;
    getAdjacentCalendarDate(mode: CalendarMode, direction: number): Date;
    getAdjacentViewStartTime(component: ICalendarComponent, direction: number): Date;
    populateAdjacentViews(component: ICalendarComponent): void;
    loadEvents(): void;
    slide(direction: number): void;
    update(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CalendarService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<CalendarService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSUNhbGVuZGFyQ29tcG9uZW50LCBDYWxlbmRhck1vZGUsIFF1ZXJ5TW9kZSB9IGZyb20gJy4vY2FsZW5kYXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgQ2FsZW5kYXJTZXJ2aWNlIHtcbiAgICBxdWVyeU1vZGU6IFF1ZXJ5TW9kZTtcbiAgICBjdXJyZW50RGF0ZUNoYW5nZWRGcm9tUGFyZW50JDogT2JzZXJ2YWJsZTxEYXRlPjtcbiAgICBjdXJyZW50RGF0ZUNoYW5nZWRGcm9tQ2hpbGRyZW4kOiBPYnNlcnZhYmxlPERhdGU+O1xuICAgIGV2ZW50U291cmNlQ2hhbmdlZCQ6IE9ic2VydmFibGU8dm9pZD47XG4gICAgc2xpZGVDaGFuZ2VkJDogT2JzZXJ2YWJsZTxudW1iZXI+O1xuICAgIHNsaWRlVXBkYXRlZCQ6IE9ic2VydmFibGU8dm9pZD47XG4gICAgcHJpdmF0ZSBfY3VycmVudERhdGU7XG4gICAgcHJpdmF0ZSBjdXJyZW50RGF0ZUNoYW5nZWRGcm9tUGFyZW50O1xuICAgIHByaXZhdGUgY3VycmVudERhdGVDaGFuZ2VkRnJvbUNoaWxkcmVuO1xuICAgIHByaXZhdGUgZXZlbnRTb3VyY2VDaGFuZ2VkO1xuICAgIHByaXZhdGUgc2xpZGVDaGFuZ2VkO1xuICAgIHByaXZhdGUgc2xpZGVVcGRhdGVkO1xuICAgIGNvbnN0cnVjdG9yKCk7XG4gICAgc2V0Q3VycmVudERhdGUodmFsOiBEYXRlLCBmcm9tUGFyZW50PzogYm9vbGVhbik6IHZvaWQ7XG4gICAgZ2V0IGN1cnJlbnREYXRlKCk6IERhdGU7XG4gICAgcmFuZ2VDaGFuZ2VkKGNvbXBvbmVudDogSUNhbGVuZGFyQ29tcG9uZW50KTogdm9pZDtcbiAgICBwcml2YXRlIGdldFN0ZXA7XG4gICAgZ2V0QWRqYWNlbnRDYWxlbmRhckRhdGUobW9kZTogQ2FsZW5kYXJNb2RlLCBkaXJlY3Rpb246IG51bWJlcik6IERhdGU7XG4gICAgZ2V0QWRqYWNlbnRWaWV3U3RhcnRUaW1lKGNvbXBvbmVudDogSUNhbGVuZGFyQ29tcG9uZW50LCBkaXJlY3Rpb246IG51bWJlcik6IERhdGU7XG4gICAgcG9wdWxhdGVBZGphY2VudFZpZXdzKGNvbXBvbmVudDogSUNhbGVuZGFyQ29tcG9uZW50KTogdm9pZDtcbiAgICBsb2FkRXZlbnRzKCk6IHZvaWQ7XG4gICAgc2xpZGUoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHVwZGF0ZSgpOiB2b2lkO1xufVxuIl19