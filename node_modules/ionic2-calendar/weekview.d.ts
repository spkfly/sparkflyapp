import { IonSlides } from '@ionic/angular';
import { OnInit, OnChanges, EventEmitter, SimpleChanges, TemplateRef, ElementRef, OnDestroy, AfterViewInit } from '@angular/core';
import { ICalendarComponent, IDisplayEvent, IEvent, ITimeSelected, IRange, IWeekView, IWeekViewRow, IWeekViewDateRow, CalendarMode, IDateFormatter, IDisplayWeekViewHeader } from './calendar';
import { CalendarService } from './calendar.service';
import { IDisplayAllDayEvent, IWeekViewAllDayEventSectionTemplateContext, IWeekViewNormalEventSectionTemplateContext } from './calendar';
import * as ɵngcc0 from '@angular/core';
export declare class WeekViewComponent implements ICalendarComponent, OnInit, OnChanges, OnDestroy, AfterViewInit {
    private calendarService;
    private elm;
    constructor(calendarService: CalendarService, elm: ElementRef);
    slider: IonSlides;
    class: boolean;
    weekviewHeaderTemplate: TemplateRef<IDisplayWeekViewHeader>;
    weekviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;
    weekviewNormalEventTemplate: TemplateRef<IDisplayEvent>;
    weekviewAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;
    weekviewNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;
    weekviewInactiveAllDayEventSectionTemplate: TemplateRef<IWeekViewAllDayEventSectionTemplateContext>;
    weekviewInactiveNormalEventSectionTemplate: TemplateRef<IWeekViewNormalEventSectionTemplateContext>;
    formatWeekTitle: string;
    formatWeekViewDayHeader: string;
    formatHourColumn: string;
    startingDayWeek: number;
    allDayLabel: string;
    hourParts: number;
    eventSource: IEvent[];
    autoSelect: boolean;
    markDisabled: (date: Date) => boolean;
    locale: string;
    dateFormatter: IDateFormatter;
    dir: string;
    scrollToHour: number;
    preserveScrollPosition: boolean;
    lockSwipeToPrev: boolean;
    lockSwipes: boolean;
    startHour: number;
    endHour: number;
    sliderOptions: any;
    hourSegments: number;
    onRangeChanged: EventEmitter<IRange>;
    onEventSelected: EventEmitter<IEvent>;
    onTimeSelected: EventEmitter<ITimeSelected>;
    onTitleChanged: EventEmitter<string>;
    views: IWeekView[];
    currentViewIndex: number;
    range: IRange;
    direction: number;
    mode: CalendarMode;
    private inited;
    private callbackOnInit;
    private currentDateChangedFromParentSubscription;
    private eventSourceChangedSubscription;
    private slideChangedSubscription;
    private slideUpdatedSubscription;
    hourColumnLabels: string[];
    initScrollPosition: number;
    private formatDayHeader;
    private formatTitle;
    private formatHourColumnLabel;
    private hourRange;
    static createDateObjects(startTime: Date, startHour: number, endHour: number, timeInterval: number): IWeekViewRow[][];
    static getDates(startTime: Date, n: number): IWeekViewDateRow[];
    private static compareEventByStartOffset;
    private static calculateWidth;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onSlideChanged(): void;
    move(direction: number): void;
    private getHourColumnLabels;
    getViewData(startTime: Date): IWeekView;
    getRange(currentDate: Date): IRange;
    onDataLoaded(): void;
    refreshView(): void;
    getTitle(): string;
    getHighlightClass(date: IWeekViewDateRow): string;
    select(selectedTime: Date, events: IDisplayEvent[]): void;
    placeEvents(orderedEvents: IDisplayEvent[]): void;
    placeAllDayEvents(orderedEvents: IDisplayEvent[]): void;
    overlap(event1: IDisplayEvent, event2: IDisplayEvent): boolean;
    calculatePosition(events: IDisplayEvent[]): void;
    updateCurrentView(currentViewStartDate: Date, view: IWeekView): void;
    daySelected(viewDate: IWeekViewDateRow): void;
    setScrollPosition(scrollPosition: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<WeekViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<WeekViewComponent, "weekview", never, { "autoSelect": "autoSelect"; "dir": "dir"; "scrollToHour": "scrollToHour"; "sliderOptions": "sliderOptions"; "weekviewHeaderTemplate": "weekviewHeaderTemplate"; "weekviewAllDayEventTemplate": "weekviewAllDayEventTemplate"; "weekviewNormalEventTemplate": "weekviewNormalEventTemplate"; "weekviewAllDayEventSectionTemplate": "weekviewAllDayEventSectionTemplate"; "weekviewNormalEventSectionTemplate": "weekviewNormalEventSectionTemplate"; "weekviewInactiveAllDayEventSectionTemplate": "weekviewInactiveAllDayEventSectionTemplate"; "weekviewInactiveNormalEventSectionTemplate": "weekviewInactiveNormalEventSectionTemplate"; "formatWeekTitle": "formatWeekTitle"; "formatWeekViewDayHeader": "formatWeekViewDayHeader"; "formatHourColumn": "formatHourColumn"; "startingDayWeek": "startingDayWeek"; "allDayLabel": "allDayLabel"; "hourParts": "hourParts"; "eventSource": "eventSource"; "markDisabled": "markDisabled"; "locale": "locale"; "dateFormatter": "dateFormatter"; "preserveScrollPosition": "preserveScrollPosition"; "lockSwipeToPrev": "lockSwipeToPrev"; "lockSwipes": "lockSwipes"; "startHour": "startHour"; "endHour": "endHour"; "hourSegments": "hourSegments"; }, { "onRangeChanged": "onRangeChanged"; "onEventSelected": "onEventSelected"; "onTimeSelected": "onTimeSelected"; "onTitleChanged": "onTitleChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2Vla3ZpZXcuZC50cyIsInNvdXJjZXMiOlsid2Vla3ZpZXcuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvblNsaWRlcyB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7IE9uSW5pdCwgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBFbGVtZW50UmVmLCBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDYWxlbmRhckNvbXBvbmVudCwgSURpc3BsYXlFdmVudCwgSUV2ZW50LCBJVGltZVNlbGVjdGVkLCBJUmFuZ2UsIElXZWVrVmlldywgSVdlZWtWaWV3Um93LCBJV2Vla1ZpZXdEYXRlUm93LCBDYWxlbmRhck1vZGUsIElEYXRlRm9ybWF0dGVyLCBJRGlzcGxheVdlZWtWaWV3SGVhZGVyIH0gZnJvbSAnLi9jYWxlbmRhcic7XG5pbXBvcnQgeyBDYWxlbmRhclNlcnZpY2UgfSBmcm9tICcuL2NhbGVuZGFyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSURpc3BsYXlBbGxEYXlFdmVudCwgSVdlZWtWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0LCBJV2Vla1ZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQgfSBmcm9tICcuL2NhbGVuZGFyJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFdlZWtWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgSUNhbGVuZGFyQ29tcG9uZW50LCBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcbiAgICBwcml2YXRlIGNhbGVuZGFyU2VydmljZTtcbiAgICBwcml2YXRlIGVsbTtcbiAgICBjb25zdHJ1Y3RvcihjYWxlbmRhclNlcnZpY2U6IENhbGVuZGFyU2VydmljZSwgZWxtOiBFbGVtZW50UmVmKTtcbiAgICBzbGlkZXI6IElvblNsaWRlcztcbiAgICBjbGFzczogYm9vbGVhbjtcbiAgICB3ZWVrdmlld0hlYWRlclRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGlzcGxheVdlZWtWaWV3SGVhZGVyPjtcbiAgICB3ZWVrdmlld0FsbERheUV2ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEaXNwbGF5QWxsRGF5RXZlbnQ+O1xuICAgIHdlZWt2aWV3Tm9ybWFsRXZlbnRUZW1wbGF0ZTogVGVtcGxhdGVSZWY8SURpc3BsYXlFdmVudD47XG4gICAgd2Vla3ZpZXdBbGxEYXlFdmVudFNlY3Rpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SVdlZWtWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICB3ZWVrdmlld05vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJV2Vla1ZpZXdOb3JtYWxFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQ+O1xuICAgIHdlZWt2aWV3SW5hY3RpdmVBbGxEYXlFdmVudFNlY3Rpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SVdlZWtWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICB3ZWVrdmlld0luYWN0aXZlTm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElXZWVrVmlld05vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dD47XG4gICAgZm9ybWF0V2Vla1RpdGxlOiBzdHJpbmc7XG4gICAgZm9ybWF0V2Vla1ZpZXdEYXlIZWFkZXI6IHN0cmluZztcbiAgICBmb3JtYXRIb3VyQ29sdW1uOiBzdHJpbmc7XG4gICAgc3RhcnRpbmdEYXlXZWVrOiBudW1iZXI7XG4gICAgYWxsRGF5TGFiZWw6IHN0cmluZztcbiAgICBob3VyUGFydHM6IG51bWJlcjtcbiAgICBldmVudFNvdXJjZTogSUV2ZW50W107XG4gICAgYXV0b1NlbGVjdDogYm9vbGVhbjtcbiAgICBtYXJrRGlzYWJsZWQ6IChkYXRlOiBEYXRlKSA9PiBib29sZWFuO1xuICAgIGxvY2FsZTogc3RyaW5nO1xuICAgIGRhdGVGb3JtYXR0ZXI6IElEYXRlRm9ybWF0dGVyO1xuICAgIGRpcjogc3RyaW5nO1xuICAgIHNjcm9sbFRvSG91cjogbnVtYmVyO1xuICAgIHByZXNlcnZlU2Nyb2xsUG9zaXRpb246IGJvb2xlYW47XG4gICAgbG9ja1N3aXBlVG9QcmV2OiBib29sZWFuO1xuICAgIGxvY2tTd2lwZXM6IGJvb2xlYW47XG4gICAgc3RhcnRIb3VyOiBudW1iZXI7XG4gICAgZW5kSG91cjogbnVtYmVyO1xuICAgIHNsaWRlck9wdGlvbnM6IGFueTtcbiAgICBob3VyU2VnbWVudHM6IG51bWJlcjtcbiAgICBvblJhbmdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPElSYW5nZT47XG4gICAgb25FdmVudFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8SUV2ZW50PjtcbiAgICBvblRpbWVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPElUaW1lU2VsZWN0ZWQ+O1xuICAgIG9uVGl0bGVDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcbiAgICB2aWV3czogSVdlZWtWaWV3W107XG4gICAgY3VycmVudFZpZXdJbmRleDogbnVtYmVyO1xuICAgIHJhbmdlOiBJUmFuZ2U7XG4gICAgZGlyZWN0aW9uOiBudW1iZXI7XG4gICAgbW9kZTogQ2FsZW5kYXJNb2RlO1xuICAgIHByaXZhdGUgaW5pdGVkO1xuICAgIHByaXZhdGUgY2FsbGJhY2tPbkluaXQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50RGF0ZUNoYW5nZWRGcm9tUGFyZW50U3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZXZlbnRTb3VyY2VDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2xpZGVDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2xpZGVVcGRhdGVkU3Vic2NyaXB0aW9uO1xuICAgIGhvdXJDb2x1bW5MYWJlbHM6IHN0cmluZ1tdO1xuICAgIGluaXRTY3JvbGxQb3NpdGlvbjogbnVtYmVyO1xuICAgIHByaXZhdGUgZm9ybWF0RGF5SGVhZGVyO1xuICAgIHByaXZhdGUgZm9ybWF0VGl0bGU7XG4gICAgcHJpdmF0ZSBmb3JtYXRIb3VyQ29sdW1uTGFiZWw7XG4gICAgcHJpdmF0ZSBob3VyUmFuZ2U7XG4gICAgc3RhdGljIGNyZWF0ZURhdGVPYmplY3RzKHN0YXJ0VGltZTogRGF0ZSwgc3RhcnRIb3VyOiBudW1iZXIsIGVuZEhvdXI6IG51bWJlciwgdGltZUludGVydmFsOiBudW1iZXIpOiBJV2Vla1ZpZXdSb3dbXVtdO1xuICAgIHN0YXRpYyBnZXREYXRlcyhzdGFydFRpbWU6IERhdGUsIG46IG51bWJlcik6IElXZWVrVmlld0RhdGVSb3dbXTtcbiAgICBwcml2YXRlIHN0YXRpYyBjb21wYXJlRXZlbnRCeVN0YXJ0T2Zmc2V0O1xuICAgIHByaXZhdGUgc3RhdGljIGNhbGN1bGF0ZVdpZHRoO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBvblNsaWRlQ2hhbmdlZCgpOiB2b2lkO1xuICAgIG1vdmUoZGlyZWN0aW9uOiBudW1iZXIpOiB2b2lkO1xuICAgIHByaXZhdGUgZ2V0SG91ckNvbHVtbkxhYmVscztcbiAgICBnZXRWaWV3RGF0YShzdGFydFRpbWU6IERhdGUpOiBJV2Vla1ZpZXc7XG4gICAgZ2V0UmFuZ2UoY3VycmVudERhdGU6IERhdGUpOiBJUmFuZ2U7XG4gICAgb25EYXRhTG9hZGVkKCk6IHZvaWQ7XG4gICAgcmVmcmVzaFZpZXcoKTogdm9pZDtcbiAgICBnZXRUaXRsZSgpOiBzdHJpbmc7XG4gICAgZ2V0SGlnaGxpZ2h0Q2xhc3MoZGF0ZTogSVdlZWtWaWV3RGF0ZVJvdyk6IHN0cmluZztcbiAgICBzZWxlY3Qoc2VsZWN0ZWRUaW1lOiBEYXRlLCBldmVudHM6IElEaXNwbGF5RXZlbnRbXSk6IHZvaWQ7XG4gICAgcGxhY2VFdmVudHMob3JkZXJlZEV2ZW50czogSURpc3BsYXlFdmVudFtdKTogdm9pZDtcbiAgICBwbGFjZUFsbERheUV2ZW50cyhvcmRlcmVkRXZlbnRzOiBJRGlzcGxheUV2ZW50W10pOiB2b2lkO1xuICAgIG92ZXJsYXAoZXZlbnQxOiBJRGlzcGxheUV2ZW50LCBldmVudDI6IElEaXNwbGF5RXZlbnQpOiBib29sZWFuO1xuICAgIGNhbGN1bGF0ZVBvc2l0aW9uKGV2ZW50czogSURpc3BsYXlFdmVudFtdKTogdm9pZDtcbiAgICB1cGRhdGVDdXJyZW50VmlldyhjdXJyZW50Vmlld1N0YXJ0RGF0ZTogRGF0ZSwgdmlldzogSVdlZWtWaWV3KTogdm9pZDtcbiAgICBkYXlTZWxlY3RlZCh2aWV3RGF0ZTogSVdlZWtWaWV3RGF0ZVJvdyk6IHZvaWQ7XG4gICAgc2V0U2Nyb2xsUG9zaXRpb24oc2Nyb2xsUG9zaXRpb246IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=