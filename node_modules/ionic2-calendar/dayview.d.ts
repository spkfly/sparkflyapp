import { IonSlides } from '@ionic/angular';
import { OnInit, OnChanges, EventEmitter, SimpleChanges, TemplateRef, ElementRef, AfterViewInit, OnDestroy } from '@angular/core';
import { ICalendarComponent, IDayView, IDayViewRow, IDisplayEvent, IEvent, ITimeSelected, IRange, CalendarMode, IDateFormatter } from './calendar';
import { CalendarService } from './calendar.service';
import { IDisplayAllDayEvent, IDayViewAllDayEventSectionTemplateContext, IDayViewNormalEventSectionTemplateContext } from './calendar';
import * as ɵngcc0 from '@angular/core';
export declare class DayViewComponent implements ICalendarComponent, OnInit, OnChanges, OnDestroy, AfterViewInit {
    private calendarService;
    private elm;
    constructor(calendarService: CalendarService, elm: ElementRef);
    slider: IonSlides;
    class: boolean;
    dayviewAllDayEventTemplate: TemplateRef<IDisplayAllDayEvent>;
    dayviewNormalEventTemplate: TemplateRef<IDisplayEvent>;
    dayviewAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;
    dayviewNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;
    dayviewInactiveAllDayEventSectionTemplate: TemplateRef<IDayViewAllDayEventSectionTemplateContext>;
    dayviewInactiveNormalEventSectionTemplate: TemplateRef<IDayViewNormalEventSectionTemplateContext>;
    formatHourColumn: string;
    formatDayTitle: string;
    allDayLabel: string;
    hourParts: number;
    eventSource: IEvent[];
    markDisabled: (date: Date) => boolean;
    locale: string;
    dateFormatter: IDateFormatter;
    dir: string;
    scrollToHour: number;
    preserveScrollPosition: boolean;
    lockSwipeToPrev: boolean;
    lockSwipes: boolean;
    startHour: number;
    endHour: number;
    sliderOptions: any;
    hourSegments: number;
    onRangeChanged: EventEmitter<IRange>;
    onEventSelected: EventEmitter<IEvent>;
    onTimeSelected: EventEmitter<ITimeSelected>;
    onTitleChanged: EventEmitter<string>;
    views: IDayView[];
    currentViewIndex: number;
    direction: number;
    mode: CalendarMode;
    range: IRange;
    private inited;
    private callbackOnInit;
    private currentDateChangedFromParentSubscription;
    private eventSourceChangedSubscription;
    private slideChangedSubscription;
    private slideUpdatedSubscription;
    hourColumnLabels: string[];
    initScrollPosition: number;
    private formatTitle;
    private formatHourColumnLabel;
    private hourRange;
    static createDateObjects(startTime: Date, startHour: number, endHour: number, timeInterval: number): IDayViewRow[];
    private static compareEventByStartOffset;
    private static calculateWidth;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onSlideChanged(): void;
    move(direction: number): void;
    private getHourColumnLabels;
    getViewData(startTime: Date): IDayView;
    getRange(currentDate: Date): IRange;
    onDataLoaded(): void;
    refreshView(): void;
    getTitle(): string;
    select(selectedTime: Date, events: IDisplayEvent[]): void;
    placeEvents(orderedEvents: IDisplayEvent[]): void;
    placeAllDayEvents(orderedEvents: IDisplayEvent[]): void;
    overlap(event1: IDisplayEvent, event2: IDisplayEvent): boolean;
    calculatePosition(events: IDisplayEvent[]): void;
    eventSelected(event: IEvent): void;
    setScrollPosition(scrollPosition: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DayViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DayViewComponent, "dayview", never, { "dir": "dir"; "scrollToHour": "scrollToHour"; "sliderOptions": "sliderOptions"; "dayviewAllDayEventTemplate": "dayviewAllDayEventTemplate"; "dayviewNormalEventTemplate": "dayviewNormalEventTemplate"; "dayviewAllDayEventSectionTemplate": "dayviewAllDayEventSectionTemplate"; "dayviewNormalEventSectionTemplate": "dayviewNormalEventSectionTemplate"; "dayviewInactiveAllDayEventSectionTemplate": "dayviewInactiveAllDayEventSectionTemplate"; "dayviewInactiveNormalEventSectionTemplate": "dayviewInactiveNormalEventSectionTemplate"; "formatHourColumn": "formatHourColumn"; "formatDayTitle": "formatDayTitle"; "allDayLabel": "allDayLabel"; "hourParts": "hourParts"; "eventSource": "eventSource"; "markDisabled": "markDisabled"; "locale": "locale"; "dateFormatter": "dateFormatter"; "preserveScrollPosition": "preserveScrollPosition"; "lockSwipeToPrev": "lockSwipeToPrev"; "lockSwipes": "lockSwipes"; "startHour": "startHour"; "endHour": "endHour"; "hourSegments": "hourSegments"; }, { "onRangeChanged": "onRangeChanged"; "onEventSelected": "onEventSelected"; "onTimeSelected": "onTimeSelected"; "onTitleChanged": "onTitleChanged"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5dmlldy5kLnRzIiwic291cmNlcyI6WyJkYXl2aWV3LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElvblNsaWRlcyB9IGZyb20gJ0Bpb25pYy9hbmd1bGFyJztcbmltcG9ydCB7IE9uSW5pdCwgT25DaGFuZ2VzLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIFRlbXBsYXRlUmVmLCBFbGVtZW50UmVmLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElDYWxlbmRhckNvbXBvbmVudCwgSURheVZpZXcsIElEYXlWaWV3Um93LCBJRGlzcGxheUV2ZW50LCBJRXZlbnQsIElUaW1lU2VsZWN0ZWQsIElSYW5nZSwgQ2FsZW5kYXJNb2RlLCBJRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vY2FsZW5kYXInO1xuaW1wb3J0IHsgQ2FsZW5kYXJTZXJ2aWNlIH0gZnJvbSAnLi9jYWxlbmRhci5zZXJ2aWNlJztcbmltcG9ydCB7IElEaXNwbGF5QWxsRGF5RXZlbnQsIElEYXlWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0LCBJRGF5Vmlld05vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dCB9IGZyb20gJy4vY2FsZW5kYXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF5Vmlld0NvbXBvbmVudCBpbXBsZW1lbnRzIElDYWxlbmRhckNvbXBvbmVudCwgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCB7XG4gICAgcHJpdmF0ZSBjYWxlbmRhclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbG07XG4gICAgY29uc3RydWN0b3IoY2FsZW5kYXJTZXJ2aWNlOiBDYWxlbmRhclNlcnZpY2UsIGVsbTogRWxlbWVudFJlZik7XG4gICAgc2xpZGVyOiBJb25TbGlkZXM7XG4gICAgY2xhc3M6IGJvb2xlYW47XG4gICAgZGF5dmlld0FsbERheUV2ZW50VGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEaXNwbGF5QWxsRGF5RXZlbnQ+O1xuICAgIGRheXZpZXdOb3JtYWxFdmVudFRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGlzcGxheUV2ZW50PjtcbiAgICBkYXl2aWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEYXlWaWV3QWxsRGF5RXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICBkYXl2aWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGU6IFRlbXBsYXRlUmVmPElEYXlWaWV3Tm9ybWFsRXZlbnRTZWN0aW9uVGVtcGxhdGVDb250ZXh0PjtcbiAgICBkYXl2aWV3SW5hY3RpdmVBbGxEYXlFdmVudFNlY3Rpb25UZW1wbGF0ZTogVGVtcGxhdGVSZWY8SURheVZpZXdBbGxEYXlFdmVudFNlY3Rpb25UZW1wbGF0ZUNvbnRleHQ+O1xuICAgIGRheXZpZXdJbmFjdGl2ZU5vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJRGF5Vmlld05vcm1hbEV2ZW50U2VjdGlvblRlbXBsYXRlQ29udGV4dD47XG4gICAgZm9ybWF0SG91ckNvbHVtbjogc3RyaW5nO1xuICAgIGZvcm1hdERheVRpdGxlOiBzdHJpbmc7XG4gICAgYWxsRGF5TGFiZWw6IHN0cmluZztcbiAgICBob3VyUGFydHM6IG51bWJlcjtcbiAgICBldmVudFNvdXJjZTogSUV2ZW50W107XG4gICAgbWFya0Rpc2FibGVkOiAoZGF0ZTogRGF0ZSkgPT4gYm9vbGVhbjtcbiAgICBsb2NhbGU6IHN0cmluZztcbiAgICBkYXRlRm9ybWF0dGVyOiBJRGF0ZUZvcm1hdHRlcjtcbiAgICBkaXI6IHN0cmluZztcbiAgICBzY3JvbGxUb0hvdXI6IG51bWJlcjtcbiAgICBwcmVzZXJ2ZVNjcm9sbFBvc2l0aW9uOiBib29sZWFuO1xuICAgIGxvY2tTd2lwZVRvUHJldjogYm9vbGVhbjtcbiAgICBsb2NrU3dpcGVzOiBib29sZWFuO1xuICAgIHN0YXJ0SG91cjogbnVtYmVyO1xuICAgIGVuZEhvdXI6IG51bWJlcjtcbiAgICBzbGlkZXJPcHRpb25zOiBhbnk7XG4gICAgaG91clNlZ21lbnRzOiBudW1iZXI7XG4gICAgb25SYW5nZUNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxJUmFuZ2U+O1xuICAgIG9uRXZlbnRTZWxlY3RlZDogRXZlbnRFbWl0dGVyPElFdmVudD47XG4gICAgb25UaW1lU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxJVGltZVNlbGVjdGVkPjtcbiAgICBvblRpdGxlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHN0cmluZz47XG4gICAgdmlld3M6IElEYXlWaWV3W107XG4gICAgY3VycmVudFZpZXdJbmRleDogbnVtYmVyO1xuICAgIGRpcmVjdGlvbjogbnVtYmVyO1xuICAgIG1vZGU6IENhbGVuZGFyTW9kZTtcbiAgICByYW5nZTogSVJhbmdlO1xuICAgIHByaXZhdGUgaW5pdGVkO1xuICAgIHByaXZhdGUgY2FsbGJhY2tPbkluaXQ7XG4gICAgcHJpdmF0ZSBjdXJyZW50RGF0ZUNoYW5nZWRGcm9tUGFyZW50U3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgZXZlbnRTb3VyY2VDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2xpZGVDaGFuZ2VkU3Vic2NyaXB0aW9uO1xuICAgIHByaXZhdGUgc2xpZGVVcGRhdGVkU3Vic2NyaXB0aW9uO1xuICAgIGhvdXJDb2x1bW5MYWJlbHM6IHN0cmluZ1tdO1xuICAgIGluaXRTY3JvbGxQb3NpdGlvbjogbnVtYmVyO1xuICAgIHByaXZhdGUgZm9ybWF0VGl0bGU7XG4gICAgcHJpdmF0ZSBmb3JtYXRIb3VyQ29sdW1uTGFiZWw7XG4gICAgcHJpdmF0ZSBob3VyUmFuZ2U7XG4gICAgc3RhdGljIGNyZWF0ZURhdGVPYmplY3RzKHN0YXJ0VGltZTogRGF0ZSwgc3RhcnRIb3VyOiBudW1iZXIsIGVuZEhvdXI6IG51bWJlciwgdGltZUludGVydmFsOiBudW1iZXIpOiBJRGF5Vmlld1Jvd1tdO1xuICAgIHByaXZhdGUgc3RhdGljIGNvbXBhcmVFdmVudEJ5U3RhcnRPZmZzZXQ7XG4gICAgcHJpdmF0ZSBzdGF0aWMgY2FsY3VsYXRlV2lkdGg7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIG9uU2xpZGVDaGFuZ2VkKCk6IHZvaWQ7XG4gICAgbW92ZShkaXJlY3Rpb246IG51bWJlcik6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXRIb3VyQ29sdW1uTGFiZWxzO1xuICAgIGdldFZpZXdEYXRhKHN0YXJ0VGltZTogRGF0ZSk6IElEYXlWaWV3O1xuICAgIGdldFJhbmdlKGN1cnJlbnREYXRlOiBEYXRlKTogSVJhbmdlO1xuICAgIG9uRGF0YUxvYWRlZCgpOiB2b2lkO1xuICAgIHJlZnJlc2hWaWV3KCk6IHZvaWQ7XG4gICAgZ2V0VGl0bGUoKTogc3RyaW5nO1xuICAgIHNlbGVjdChzZWxlY3RlZFRpbWU6IERhdGUsIGV2ZW50czogSURpc3BsYXlFdmVudFtdKTogdm9pZDtcbiAgICBwbGFjZUV2ZW50cyhvcmRlcmVkRXZlbnRzOiBJRGlzcGxheUV2ZW50W10pOiB2b2lkO1xuICAgIHBsYWNlQWxsRGF5RXZlbnRzKG9yZGVyZWRFdmVudHM6IElEaXNwbGF5RXZlbnRbXSk6IHZvaWQ7XG4gICAgb3ZlcmxhcChldmVudDE6IElEaXNwbGF5RXZlbnQsIGV2ZW50MjogSURpc3BsYXlFdmVudCk6IGJvb2xlYW47XG4gICAgY2FsY3VsYXRlUG9zaXRpb24oZXZlbnRzOiBJRGlzcGxheUV2ZW50W10pOiB2b2lkO1xuICAgIGV2ZW50U2VsZWN0ZWQoZXZlbnQ6IElFdmVudCk6IHZvaWQ7XG4gICAgc2V0U2Nyb2xsUG9zaXRpb24oc2Nyb2xsUG9zaXRpb246IG51bWJlcik6IHZvaWQ7XG59XG4iXX0=