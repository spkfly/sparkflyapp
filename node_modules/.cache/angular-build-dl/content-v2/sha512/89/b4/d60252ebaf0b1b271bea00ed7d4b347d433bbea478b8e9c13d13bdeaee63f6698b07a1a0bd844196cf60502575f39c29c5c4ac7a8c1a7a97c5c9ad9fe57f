{"version":3,"sources":["webpack:///src/app/sign-up/sign-up.module.ts","webpack:///src/app/sign-up/sign-up.page.html","webpack:///src/app/sign-up/sign-up.page.scss","webpack:///src/app/validators/password.validator.ts","webpack:///src/app/sign-up/sign-up.page.ts","webpack:///src/app/validators/username.validator.ts"],"names":["routes","path","component","SignUpPageModule","imports","forChild","declarations","PasswordValidator","formGroup","val","valid","key","controls","hasOwnProperty","control","undefined","value","areEqual","SignUpPage","formBuilder","router","validation_messages","type","message","genders","matching_passwords_group","password","compose","minLength","required","pattern","confirm_password","signup_form","group","handle","validUsername","maxLength","firstName","lastName","email","gender","matching_passwords","terms","values","console","log","navigate","selector","template","UsernameValidator","fc","toLowerCase"],"mappings":"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","file":"sign-up-sign-up-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { SignUpPageRoutingModule } from './sign-up-routing.module';\nimport { SignUpPage } from './sign-up.page';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignUpPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    RouterModule.forChild(routes)\n    //SignUpPageRoutingModule\n  ],\n  declarations: [SignUpPage]\n})\nexport class SignUpPageModule {}","export default \"<ion-header>\\n  <ion-toolbar text-center>\\n    <ion-button fill=\\\"clear\\\" [routerLink]=\\\"['/account-ui']\\\">Cancel</ion-button>\\n    <ion-title>Create An Account</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content padding>\\n  <form [formGroup]=\\\"signup_form\\\" (ngSubmit)=\\\"onSubmit(signup_form.value)\\\">\\n    <!--FIRST NAME-->\\n    <ion-item>\\n      <ion-input type=\\\"text\\\" placeholder=\\\"First Name\\\" formControlName=\\\"firstName\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"valid-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.firstName\\\">\\n        <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('firstName').hasError(validation.type)&&(signup_form.get('firstName').dirty||signup_form.get('firstName').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!--LAST NAME-->\\n    <ion-item>\\n      <ion-input type=\\\"text\\\" placeholder=\\\"Last Name\\\" formControlName=\\\"lastName\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"valid-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.lastName\\\">\\n        <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('lastName').hasError(validation.type)&&(signup_form.get('lastName').dirty||signup_form.get('lastName').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!--GENDER-->\\n    <ion-item>\\n      <ion-label color=\\\"secondary\\\">Gender</ion-label>\\n      <ion-select formControlName=\\\"firstName\\\" cancelText=\\\"Cancel\\\" okText=\\\"OK\\\">\\n        <ion-select-option *ngFor=\\\"let gender of genders\\\" [value]=\\\"gender\\\">{{gender}}</ion-select-option>\\n      </ion-select>\\n    </ion-item>\\n    <!--USERNAME-->\\n    <ion-item>\\n      <ion-input type=\\\"text\\\" placeholder=\\\"Username\\\" formControlName=\\\"handle\\\"></ion-input>\\n    </ion-item>\\n    <div class=\\\"valid-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.handle\\\">\\n        <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('handle').hasError(validation.type)&&(signup_form.get('handle').dirty||signup_form.get('handle').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!--PASSWORD-->\\n    <div formGroupName=\\\"matching_passwords\\\">\\n      <ion-item>\\n        <ion-input type=\\\"password\\\" placeholder=\\\"Password\\\" formControlName=\\\"password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"valid-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\n          <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('matching_passwords').get('password').hasError(validation.type)&&(signup_form.get('matching_passwords').get('password').dirty||signup_form.get('matching_passwords').get('password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n          </div>\\n        </ng-container>\\n      </div>\\n\\n      <ion-item>\\n        <ion-input type=\\\"password\\\" placeholder=\\\"Confirm Password\\\" formControlName=\\\"confirm_password\\\"></ion-input>\\n      </ion-item>\\n      <div class=\\\"valid-errors\\\">\\n        <ng-container *ngFor=\\\"let validation of validation_messages.confirm_password\\\">\\n          <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('matching_passwords').get('confirm_password').hasError(validation.type)&&(signup_form.get('matching_passwords').get('confirm_password').dirty||signup_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n            <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n          </div>\\n        </ng-container>\\n      </div>\\n    </div>\\n    <!--Validations for the FormGroup-->\\n    <div class=\\\"valid-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.matching_passwords\\\">\\n        <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('matching_passwords').hasError(validation.type)&&(signup_form.get('matching_passwords').get('confirm_password').dirty||signup_form.get('matching_passwords').get('confirm_password').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!--TERMS AND CONDITIONS-->\\n    <ion-item>\\n      <ion-label color=\\\"secondary\\\">I accept terms and conditions</ion-label>\\n      <ion-checkbox formControlName=\\\"terms\\\"></ion-checkbox>\\n    </ion-item>\\n    <div class=\\\"valid-errors\\\">\\n      <ng-container *ngFor=\\\"let validation of validation_messages.terms\\\">\\n        <div class=\\\"signup-error-msg\\\" *ngIf=\\\"signup_form.get('terms').hasError(validation.type)&&(signup_form.get('terms').dirty||signup_form.get('terms').touched)\\\">\\n          <ion-icon name=\\\"information-circle-outline\\\"></ion-icon> {{validation.message}}\\n        </div>\\n      </ng-container>\\n    </div>\\n    <!--SUBMIT BUTTON-->\\n    <ion-button color=\\\"success\\\" expand=\\\"block\\\" type=\\\"submit\\\" [disabled]=\\\"!signup_form.valid\\\">Create Account</ion-button>\\n  \\n  </form>\\n</ion-content>\";","export default \"ion-header {\\n  --ion-background-color: #1a202c;\\n}\\nion-header ion-title {\\n  color: #1f7872;\\n  display: inline-block;\\n}\\nion-content {\\n  --ion-background-color: #1a202c;\\n}\\nion-input {\\n  color: white;\\n}\\nion-item {\\n  margin-top: 5%;\\n  margin-bottom: 5%;\\n}\\n.valid-errors {\\n  color: white;\\n  font-size: small;\\n  margin-left: 5%;\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXHNpZ24tdXAucGFnZS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksK0JBQUE7QUFDSjtBQUFJO0VBQ0ksY0FBQTtFQUNBLHFCQUFBO0FBRVI7QUFFQTtFQUNJLCtCQUFBO0FBQ0o7QUFDQTtFQUNJLFlBQUE7QUFFSjtBQUNBO0VBQ0ksY0FBQTtFQUNBLGlCQUFBO0FBRUo7QUFBQTtFQUNJLFlBQUE7RUFDQSxnQkFBQTtFQUNBLGVBQUE7QUFHSiIsImZpbGUiOiJzaWduLXVwLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1oZWFkZXIge1xyXG4gICAgLS1pb24tYmFja2dyb3VuZC1jb2xvcjogIzFhMjAyYztcclxuICAgIGlvbi10aXRsZSB7XHJcbiAgICAgICAgY29sb3I6ICMxZjc4NzI7XHJcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgfVxyXG59XHJcblxyXG5pb24tY29udGVudCB7XHJcbiAgICAtLWlvbi1iYWNrZ3JvdW5kLWNvbG9yOiAjMWEyMDJjO1xyXG59XHJcbmlvbi1pbnB1dCB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbn1cclxuXHJcbmlvbi1pdGVtIHtcclxuICAgIG1hcmdpbi10b3A6IDUlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNSU7XHJcbn1cclxuLnZhbGlkLWVycm9ycyB7XHJcbiAgICBjb2xvcjogd2hpdGU7XHJcbiAgICBmb250LXNpemU6IHNtYWxsO1xyXG4gICAgbWFyZ2luLWxlZnQ6IDUlO1xyXG59Il19 */\";","import { FormControl, FormGroup } from '@angular/forms';\r\n\r\nexport class PasswordValidator {\r\n    static areEqual(formGroup: FormGroup) {\r\n        let val;\r\n        let valid = true;\r\n\r\n        for (let key in formGroup.controls) {\r\n            if (formGroup.controls.hasOwnProperty(key)) {\r\n                let control: FormControl = <FormControl>formGroup.controls[key];\r\n                if (val===undefined) {\r\n                    val=control.value\r\n                } else {\r\n                    if (val !== control.value) {\r\n                        valid = false;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (valid) {\r\n            return null;\r\n        }\r\n        return {\r\n            areEqual: true\r\n        };\r\n    }\r\n}","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { PasswordValidator } from '../validators/password.validator';\nimport { UsernameValidator } from '../validators/username.validator';\n\n@Component({\n  selector: 'app-sign-up',\n  templateUrl: './sign-up.page.html',\n  styleUrls: ['./sign-up.page.scss'],\n})\n\nexport class SignUpPage implements OnInit {\n  signup_form: FormGroup;\n  matching_passwords_group: FormGroup;\n\n  genders: Array<string>;\n\n  constructor(\n    public formBuilder: FormBuilder,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.genders = [\n      \"Male\",\n      \"Female\"\n    ];\n    \n    this.matching_passwords_group = new FormGroup({\n      password: new FormControl('', Validators.compose([\n        Validators.minLength(6),\n        Validators.required,\n        Validators.pattern('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])[a-zA-Z0-9_-]+$') //required: one uppercase, one lowercase, one number, can include underscore/hyphen\n      ])),\n      confirm_password: new FormControl('', Validators.required)\n    }, (formGroup: FormGroup) => {\n      return PasswordValidator.areEqual(formGroup);\n    });\n\n    this.signup_form = this.formBuilder.group({\n      handle: new FormControl('', Validators.compose([\n        UsernameValidator.validUsername,\n        Validators.maxLength(20),\n        Validators.minLength(5),\n        Validators.pattern('^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$'),\n        Validators.required\n      ])),\n      firstName: new FormControl('', Validators.required),\n      lastName: new FormControl('', Validators.required),\n      email: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$') //must be <text>@<text>.<text>\n      ])),\n      gender: new FormControl(this.genders[0], Validators.required),\n      matching_passwords: this.matching_passwords_group,\n      terms: new FormControl(true, Validators.pattern('true'))\n    });\n  }\n\n  validation_messages = {\n    'handle': [\n      {type: 'required', message: 'Required'},\n      {type: 'minLength', message: 'Must be at least 5 characters long'},\n      {type: 'maxLength', message: 'Cannot be more than 25 characters long'},\n      {type: 'pattern', message: 'Must only contain letters and numbers'},\n      {type: 'validUsername', message: 'Username already taken'}\n    ],\n    'firstName': [\n      {type: 'required', message: 'Required'}\n    ],\n    'lastName': [\n      {type: 'required', message: 'Required'}\n    ],\n    'email': [\n      {type: 'required', message: 'Required'},\n      {type: 'pattern', message: 'Please enter a valid email'}\n    ],\n    'password': [\n      {type: 'required', message: 'Required'},\n      {type: 'minlength', message: 'Must be at least 6 characters long'},\n      {type: 'pattern', message: 'Must contains at least one uppercase letter, one lowercase letter, and one number'}\n    ],\n    'confirm_password': [\n      {type: 'required', message: 'Re-type password'}\n    ],\n    'matching_passwords': [\n      {type: 'areEqual', message: 'Passwords must match'}\n    ],\n    'terms': [\n      {type: 'pattern', message: 'You must accept the terms and conditions'}\n    ],\n  };\n\n  onSubmit(values) {\n    console.log(values);\n    this.router.navigate([\"/tab1\"]); //temporarily routes to home page\n  }\n\n}","import { FormControl } from '@angular/forms';\r\n\r\nexport class UsernameValidator {\r\n    static validUsername(fc: FormControl) {\r\n        if (fc.value.toLowerCase()===\"abc123\" || fc.value.toLowerCase()===\"123abc\") {\r\n            return {\r\n                validUsername: true\r\n            };\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n//Change these values to check usernames with API"]}